{"version":3,"sources":["components/album.jsx","screens/album.list.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Album","props","state","popup","console","log","Date","releaseDate","dateString","d","date","getDate","getMonth","getFullYear","className","this","ranking","src","imgSrc","alt","onClick","setState","name","artist","price","itemCount","genre","getDateString","React","Component","AlbumList","rawAlbumArray","inputValue","changeHandler","bind","event","target","value","axios","get","then","response","data","feed","entry","filteredArray","filter","albumObj","label","toLowerCase","indexOf","type","onChange","placeholder","map","index","category","attributes","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae87411d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../scss/album.scss'\n\n\n\nexport default class Album extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            popup: false,\n        };\n        console.log(new Date(this.props.releaseDate));\n    }\n\n    getDateString(dateString) {\n        let d = new Date(dateString);\n        let date = d. getDate();\n        let month = d. getMonth() + 1; // Since getMonth() returns month from 0-11 not 1-12.\n        let year = d. getFullYear();\n        return month + \"/\" + date + \"/\" + year;\n    }\n\n    render() {\n        return (\n            <div className=\"album__wrapper\">\n                <p className=\"album__ranking\">{ this.props.ranking }.</p>\n                <img\n                    className=\"album__image\"\n                    src={ this.props.imgSrc }\n                    alt=\"album_image\"\n                    onClick={ () => this.setState({popup: !this.state.popup}) }\n                />\n                <p className=\"album__name\">{ this.props.name }</p>\n                <p className=\"album__artist\">{ this.props.artist }</p>\n                {\n                    this.state.popup\n                        ?\n                        <div className=\"album--popup__wrapper\">\n                            <div className=\"album--popup__card\">\n                                <img\n                                    className=\"album--popup__image\"\n                                    src={ this.props.imgSrc }\n                                    alt=\"album_image\"\n                                    />\n                                <div className=\"album--popup__text-wrapper\">\n                                    <p className=\"album--popup__name\">{ this.props.name }</p>\n                                    <p className=\"album--popup__artist\">{ this.props.artist }</p>\n                                    <p className=\"album--popup__price\">Price: { this.props.price }</p>\n                                    <p className=\"album--popup__itemCount\">Number of Songs: { this.props.itemCount }</p>\n                                    <p className=\"album--popup__genre\">Genre: { this.props.genre }</p>\n                                    <p className=\"album--popup__releaseDate\">Release Date: { this.getDateString(this.props.releaseDate) }</p>\n                                </div>\n                                <div className=\"album--popup__close\" onClick={() => this.setState({popup: false})}>X</div>\n                            </div>\n                        </div>\n\n                        : null\n                }\n            </div>\n        );\n    }\n\n\n}\n\nAlbum.propTypes = {\n    ranking: PropTypes.number.isRequired,\n    imgSrc: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    artist: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    itemCount: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    releaseDate: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport axios from 'axios';\nimport Album from \"../components/album\";\nimport '../scss/album.list.scss'\n\nexport default class AlbumList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawAlbumArray: [],\n            inputValue: '',\n        };\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n\n    changeHandler(event) {\n        this.setState({inputValue: event.target.value});\n    }\n\n    componentDidMount() {\n        axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\n            .then((response) => {\n                this.setState({rawAlbumArray: response.data.feed.entry});\n            })\n    }\n\n\n    render() {\n        let filteredArray = this.state.rawAlbumArray.filter((albumObj) => {\n            return albumObj[\"im:name\"].label.toLowerCase().indexOf(this.state.inputValue) !== -1\n        });\n        return (\n            <div>\n                <input\n                    className=\"album-list__input\"\n                    type=\"text\"\n                    value={this.state.inputValue}\n                    onChange={this.changeHandler}\n                    placeholder=\"Begin entering name of album to search\"\n                />\n                <div className=\"album-list__wrapper\">\n                    {\n                        filteredArray.map((albumObj, index) => {\n                            return <Album\n                                ranking={ index + 1 }\n                                imgSrc={ albumObj[\"im:image\"][2].label }\n                                name={ albumObj[\"im:name\"].label }\n                                artist={ albumObj[\"im:artist\"].label }\n                                price={ albumObj[\"im:price\"].label }\n                                itemCount={ albumObj[\"im:itemCount\"].label }\n                                genre={ albumObj.category.attributes.label }\n                                releaseDate={ albumObj[\"im:releaseDate\"].label }\n                            />\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\n","import React from 'react';\n\n// I am using HashRouter instead of BrowserRouter to work with github pages(github.io)\nimport { HashRouter, Route } from 'react-router-dom'\n\nimport AlbumList from \"./screens/album.list\";\nimport './scss/app.scss'\n\nfunction App() {\n  return (\n      <HashRouter>\n        <Route exact path=\"/\" component={AlbumList}/>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}